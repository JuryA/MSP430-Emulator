#include "decoder.h"
#include "formatI.c"
#include "formatII.c"
#include "formatIII.c"

//##########+++ CPU Fetch Cycle +++##########
unsigned short fetch(unsigned char* MEM){

  return *( (unsigned short*) MEM );

}

void decode(unsigned char* MEM){
  int done = 0;
  char reg_name[10];
  unsigned short instruction;
  unsigned char format_id;

  while( !done ){
    instruction = fetch(MEM);
    format_id = *( MEM + 1 ) >> 4;

    memset(reg_name, 0, sizeof(reg_name));
    printf("Got instruction 0x%04X\n", instruction);

    if( format_id == 0x1 ){

      //# Decide firnat I (single operand) instructions
      decode_formatI(instruction);
      MEM += 2;

    }    
    else if(format_id >= 0x2 && format_id <= 3){

      //# Decode format II (jump) instructions
      decode_formatII(instruction);
      MEM += 2;

    }
    else if(format_id >= 0x4){
      unsigned short instruction = *( (unsigned short*)MEM );
      unsigned char source_reg = ( instruction & 0x0F00 ) >> 8;

      switch(format_id){
        //# MOV source to destination
        case 0x4:{
	  printf("MOV %s\n", source_reg);
	  break;
	}
        //# ADD source to destination
        case 0x5:{
	  printf("ADD %s\n", source_reg);
	  break;
	}
	//# ADDC Add w/carry dst += (src+C)
        case 0x6:{
	  printf("ADDC %s\n", source_reg);
	  break;
        }
	//# SUBC Sub w/carry dst -= (src+C)
        case 0x7:{
	  printf("SUBC %s\n", source_reg);
	  break;
        }
	 
	//# SUB dst -= src
        case 0x8:{
	  printf("SUB %s\n", source_reg);
        }

      }

      MEM += 4;
    }
    else{
      MEM += 2;
    }
    
    command_loop();

  }
}
